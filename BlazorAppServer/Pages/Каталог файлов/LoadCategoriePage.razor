@using BlazorAppServer.Data
@using Enums
@using BlazorAppServer.Data.Models;
@using BlazorAppServer.Data.Services

@inject FileService fileService

@page "/load/{categorieUrl}"

<PageTitle>@PageName</PageTitle>
<HeadContent> 
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta name="description" content="тест2">
    <meta name="keywords" content="тест">
    <meta name="robots" content="index,follow">
</HeadContent>


<link href="/css/FileStyle.css" rel="stylesheet" type="text/css" />

<div class="breadcrumbNav">
    <BreadcrumbComponent Items="@breadcrumbItems" />
</div>
    <table border="0" style="margin-left:10px;margin-bottom:10px;font-size:12px;" cellpadding="0" cellspacing="0" width="100%">
        <tr>
            <td width="60%">Всего материалов в каталоге: <b>@TotalFilesCount</b><br />Показано материалов: <b>@VisibleFiles</b></td>
        <td align="right">
            @if (FileList.Count > 0)
            {
                <MudPagination Style="margin-bottom:5px;margin-right:10px;" Variant="Variant.Filled" Count="@TotalPages" @bind-Selected="@_selected" />
            }
        </td>
    </tr>
</table>

@if (FileList != null || FileList?.Count == 0)
{
    @foreach (FileModel item in FileList)
    {
        <div class="mini-vid clr">
            <div class="mini-vid-title">
                <span class="title-icon"><a href="@item.GetFilePath()">@item.Name</a></span>

            </div>

            <div class="mini-vid-img-text">
                <div class="mini-vid-img">
                    <img src="@item.GetFirstImageUrl()" alt="@item.Name">
                </div>
                <div class="mini-vid-text">
                    @item.Description
                </div>
            </div>
            <div class="mini-vid-detali">
                <a href="@item.GetCategoryLink()"><span class="reads">@item.Category</span></a>
                <span class="dates">@item.CreationTime</span>
                <span class="reads">@item.Views просмотров</span>
                <span class="coments">@item.Comments.Count комментариев</span>
                <span><a href="@item.GetFilePath()">Открыть</a></span>
            </div>
        </div>
    }
    @if(FileList.Count > 0)
    {
        <MudPagination Style="justify-content: center;align-items: center;display: flex;margin-bottom:10px; margin-top:-20px;"
                       Variant="Variant.Filled"
                       Count="@TotalPages"
        @bind-Selected="@_selected" />
    }
    else
    {
        <MudAlert Severity="Severity.Info" Style="margin:5px;" Variant="Variant.Filled">К сожалению данная категория еще пуста...</MudAlert>
    }

}
else
{
    <MudAlert Severity="Severity.Info" Style="margin:5px;" Variant="Variant.Filled">К сожалению данная категория еще пуста...</MudAlert>
}




@code {

    private bool isPageInitialized = false;

    List<FileModel> FileList = new List<FileModel>();

    [Parameter] public string PageName { get; set; }
    [Parameter] public string PageDescription { get; set; }
    [Parameter] public string PageKeywords { get; set; }
    [Parameter] public string PageTitle { get; set; }

    private int _selectedPage = 1;
    [Parameter] public int TotalFilesCount { get; set; }
    [Parameter] public int TotalPages { get; set; } = 0;
    [Parameter] public int PageSize { get; set; } = 5;
    [Parameter] public int VisibleFiles { get; set; } = 0;
    private int _selected
    {
        get => _selectedPage;
        set
        {
            if (_selectedPage != value)
            {
                _selectedPage = value;
                LoadFiles();
            }
        }
    }

    [Parameter]
    public string categorieUrl
    {
        get => _categorieUrl;
        set
        {
            if (_categorieUrl == value) return;
            _categorieUrl = value;
            UpdateBreadcrumb();
            LoadFiles();
        }
    }
    private string _categorieUrl;

    private List<Components.BreadcrumbItem> breadcrumbItems = new List<Components.BreadcrumbItem>
    {
        new Components.BreadcrumbItem { DisplayName = "Главная страница", Url = "/", Position = 1 },
        new Components.BreadcrumbItem { DisplayName = "Каталог файлов", Url = "/load",  Position = 2 },
        new Components.BreadcrumbItem { DisplayName = $"Категория", Url = $"/load/#", IsCurrent=true, Position = 3 },
    };


    private void UpdateBreadcrumb()
    {
        string categoryName = Enums.EnumHelper.GetCategoryNameFromSlug(categorieUrl, true);
        breadcrumbItems[2] = new Components.BreadcrumbItem
            {
                DisplayName = categoryName,
                Url = $"/load/{categorieUrl}",
                IsCurrent = true,
                Position = 3
            };
    }

    private async Task LoadFiles()
    {
        if (isPageInitialized)
        {
            string categoryName = Enums.EnumHelper.GetCategoryNameFromSlug(_categorieUrl, true);
            PageName = categoryName;


            FileList = await fileService.fileRepository.GetLoadFromCategorie(categoryName);
            TotalFilesCount = FileList.Count();


            TotalPages = (int)Math.Ceiling(FileList.Count / (double)PageSize);

            FileList = FileList
                .Skip((_selectedPage - 1) * PageSize)
                .Take(PageSize)
                .ToList();

            VisibleFiles = FileList.Count;

            // foreach (FileModel item in FileList)
            // {
            //     item.Image = await fileService.imageRepository.GetImagesAsync(item.Id);
            //     item.Comments = await fileService.commentRepository.GetCommentsForFileAsync(item.Id);
            // }
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        isPageInitialized = true;
        await LoadFiles();
      
    }
}
