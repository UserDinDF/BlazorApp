@using BlazorAppServer.Data.Models;
@using BlazorAppServer.Data

@inject FileService commentService

    <div class="page__comments-header">
    <div class="page__comments-title">Комментарии (@Comments.Count)</div>
    </div>

         
<div class="page__comments-list">
        @foreach (var comment in CurrentFile.Comments)
        {
<div style="position:relative;padding-bottom:7px;" class="mcontcomm">  
<div style="border:1px solid #C7C6C6;padding:5px;background-color:#f1f1f1; min-height: 62px;border-radius: 5px;"> 
<div style="border:1px solid #C7C6C6;padding:5px;background-color:#ffffff; min-height: 62px; border-radius: 5px;">  
<?endif?>  
<div class="avacomUDS"><MudAvatar Color="Color.Primary">@comment.Author.Substring(0, 1)</MudAvatar></div>  
<div class="textcomUDS">  
<div class="usernamelinkUDS"><a href="$ANSWER_URL$" style="padding-left: 1px;" class="bbb usernamelnk"><span class="bbb">@comment.Author</span></a>
<span class="datesmall">Добавлен @comment.Timestamp</span>
</div>  
  <div style="padding-right: 50px;">  
@comment.Content
  </div>  
@* <div align="right" style="clear:both;font-size:7pt;color:#666666;">  
<?if($ANSWER$)?><div class="cAnswer" style="text-align:left;clear:both;"><b>Ответ</b>: $ANSWER$</div><?endif?>
<?if($ANSWER_URL$)?><div style="clear:both;padding:4px 0;font-size:7pt;">[<a href="$ANSWER_URL$">Ответить</a>]</div><?endif?>  
</div>   *@
</div>  
</div>  
</div>  
</div>  
}
</div>

 <AuthorizeView>
    <Authorized>
        <div class="page__comments-title">Добавить комментарий</div>
       <div class="page__comments-form">
    <form @onsubmit="SubmitComment">
        <div class="form-group">
            <MudTextField Label="Ваше имя" TextChanged="TextChanged" @bind-Value="author" T="string" Multiline="false" Rows="4"></MudTextField>
        </div>
        <div class="form-group">
            <MudTextField Label="Сообщение" TextChanged="TextChanged" @bind-Value="commentText" T="string" Multiline="true" Rows="4"></MudTextField>
        </div>

         <MudTextField Label="@captchaText" TextChanged="TextChanged" @bind-Value="userAnswer" T="string" Multiline="true" Rows="4"></MudTextField>


     @if (AlertIsVisible)
    {
        <MudAlert Severity="Severity.Warning">@AlertText</MudAlert>
    }

       <button type="submit" disabled="@isButtonDisabled" class="btn btn-primary" style="margin:5px;">Отправить комментарий</button>
    </form>
</div>
    </Authorized>
    <NotAuthorized>
<MudAlert Severity="Severity.Info">Комментарии на сайте доступны только для зарегистрированных пользователей. Пожалуйста авторизуйтесь или зарегистрируйтесь</MudAlert>
    </NotAuthorized>
</AuthorizeView>

@code {
    public bool AlertIsVisible { get; set; }
    public string AlertText { get; set; }

    [Parameter] public ICollection<CommentModel> Comments { get; set; }
    [Parameter] public FileModel CurrentFile { get; set; }

    private bool isButtonDisabled = true;
    private string author;
    private string commentText;

    private int num1;
    private int num2;
    private int captchaAnswer;
    private string userAnswer;
    private string captchaText;

    protected override void OnInitialized()
    {
        GenerateCaptcha();
    }

    private bool CheckInputs()
    {
        if (String.IsNullOrEmpty(author))
        {
            AlertIsVisible = true;
            isButtonDisabled = true;
            AlertText = "Поле имя пользователя пустое";
            return false;
        }
        if (String.IsNullOrEmpty(commentText))
        {
            AlertIsVisible = true;
            isButtonDisabled = true;
            AlertText = "Поле комментарий пустое";
            return false;
        }
        if (captchaAnswer != Convert.ToInt32(userAnswer))
        {
            AlertIsVisible = true;
            isButtonDisabled = true;
            AlertText = "Пример решен не верно!";
            return false;
        }
        if (String.IsNullOrEmpty(userAnswer.ToString()))
        {
            AlertIsVisible = true;
            isButtonDisabled = true;
            AlertText = "Пример не решен!";
            return false;
        }

        AlertIsVisible = false;
        isButtonDisabled = false;
        return true;
    }

    private void TextChanged(string value)
    {
        CheckInputs();
    }

    private void GenerateCaptcha()
    {
        Random random = new Random();
        num1 = random.Next(1, 10);
        num2 = random.Next(1, 10);
        captchaAnswer = num1 + num2;
        captchaText = $"{num1} + {num2} = ?";
    }

    private async Task SubmitComment()
    {
        if (CheckInputs() == false) return;

        var newComment = new CommentModel
            {
                Author = author,
                Content = commentText,
                Timestamp = DateTime.Now,
                FileModel = CurrentFile
            };

        bool result = await commentService.commentRepository.InsertCommentAsync(newComment);

        if (result)
        {
            author = string.Empty;
            commentText = string.Empty;

            CurrentFile.Comments = await commentService.commentRepository.GetCommentsForFileAsync(CurrentFile.Id);
            GenerateCaptcha(); 
        }
    }
}
<style>
.datesmall{font-size:10px;color:#adadad;}  
.ratecomUDS{padding: 5px 7px 5px 5px; float:right; font-size:7pt; font-weight: bold; clear:both;font-size:7pt;color:#666666;}  
.ratecomUDS span {color: #318bbf;}  
.bbb {font-weight:bold; color:#666666;}  
.bbb_p {font-weight:bold;color:#666666;}  
.mcontcomm{padding-left:5px;padding-right:5px; display:block; color: #666666;line-height:11px;font-size:12px; font-family:tahoma;}  
.mcontcomm a{color: #666 !important; text-decoration:none; font-weight: bold;}  
.mcontcomm a:hover {color: #44bbff !important; text-decoration:none;}  
.usernamelnk{font-size:11px !important; padding:2px 2px 2px 0;}  
.avacomUDS {float: left;border: 1px #d2d2d2 solid; padding: 2px; position: absolute;border-radius: 51px;}  
.avacomUDS img {width: 55px;height: 55px;border-radius: 51px;}  
.avacomUDS a img {opacity:1.0; -moz-opacity:1.0; filter:alpha(opacity=100);}  
.avacomUDS a:hover img { opacity:0.6; -moz-opacity:0.4; filter:alpha(opacity=70); }  
.textcomUDS {padding-left: 65px;}
</style>