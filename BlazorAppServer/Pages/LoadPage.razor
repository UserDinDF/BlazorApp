@page "/load/{Id}/{SeoUrl}"
@using BlazorAppServer.Data
@using BlazorAppServer.Components
@using BlazorAppServer.Enums
@inject FileService fileService
@inject NavigationManager navigationManager

<PageTitle>@GetTitle()</PageTitle>

<link href="/css/FileStyle.css" rel="stylesheet" type="text/css" />
<link href="/css/FileStylePage.css" rel="stylesheet" />

<HeadContent> 
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta name="description" content="@GetDescription()">
    <meta name="keywords" content="@GetKeywords()">
</HeadContent>


<div class="breadcrumbNav">
    <BreadcrumbComponent Items="@breadcrumbItems" />
</div>


<div class="content">
<div class="cols">
<main class="col-main">


<div class="content-block d-grid" id="content-block">

<article class="page ignore-select">
<div class="short sect__header">
<header class="short__header">
@* <?if($MODER_PANEL$)?><div style="float: right;padding: 5px;">$MODER_PANEL$</div><?endif?> *@
<h1 class="short__title">@fileModel.Name</h1>
<div class="short__meta d-flex">
<div class="short__meta-item"><MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" />@fileModel.CreationTime.ToShortDateString(), @fileModel.CreationTime.ToShortTimeString()</div>
<div class="short__meta-item hm2"></div>
<div class="short__meta-item hm2"><MudIcon Icon="@Icons.Material.Filled.Preview" Size="Size.Small" />@fileModel.Views</div>
<div class="short__meta-item"><MudIcon Icon="@Icons.Material.Filled.Comment" Size="Size.Small" />@fileModel.Comments</div>
<div class="short__meta-item"><?$RSTARS$('17','/dleimages/rating.svg','1','float')?></div>
</div>
</header>

<figure class="short__img img-fit-cover"><MudImage Src="@fileModel.Image" Width="332" Height="250" Alt="Swedish Farm House" Elevation="25" Class="rounded-lg ma-4"/></figure>

<div class="short__desc">
<div class="page__text full-text clearfix">@GetHtmlDescription()</div>

<br><a href="$FILE_URL$" class="fdl-btn ignore-select">
<div class="fdl-btn-title">Скачать @fileModel.Name бесплатно</div>
<div class="fdl-btn-size fx-col fx-center">Размер: @fileModel.DownloadSize</div>

<div class="fdl-btn-footer fx-row fx-middle">
<div class="fdl-btn-caption fx-1 ws-nowrap">Название файла: @fileModel.DownloadFileName</div>
<div class="fdl-btn-dl">Скачали @fileModel.Downloads раз</div>
</div>

<div class="fdl-btn-icon"><span class="fal fa-arrow-to-bottom"></span></div>
</a>

<?if($TAGS$)?><div class="page__tags"><span class="fal fa-tags"></span>$TAGS$</div><?endif?>

<?if($COM_IS_ACTIVE$)?>
<div class="page__comments">

<div class="page__comments-header">
<div class="page__comments-title">Комментарии</div>
<div class="page__comments-info">
<span class="fal fa-exclamation-circle"></span>
Минимальная длина комментария - 50 знаков. комментарии модерируются
</div>
<button class="page__comments-btn js-show-comments">Добавить</button>
</div>

<div class="page__comments-form d-none">
<?if($COM_CAN_ADD$)?>$COM_ADD_FORM$<?else?>
<?if($USER_LOGGED_IN$)?>
<?else?>
<div class="message-info">
<div class="message-info__title">Ошибка!</div>
<div class="message-info__content">Добавлять комментарии могут только зарегистрированные пользователи.</div>
</div>
<?endif?>
<?endif?>
</div>

<div class="page__comments-list <?if($COM_NUM_SHOWN$='0')?> has-comms<?endif?>" id="page__comments-list">
<?if($COM_CAN_READ$)?>$COM_BODY$<?endif?>
<?if($COM_PAGE_SELECTOR$)?>
<div class="pagination ignore-select" id="pagination">
<div class="pagination__pages d-flex jc-center">$COM_PAGE_SELECTOR$</div>
</div>
<?endif?>
<style>#allEntries {display: block !important;}</style>
</div>

</div>
<?endif?>
</div>
</div>

<section class="sect">
<h2 class="sect__header sect__title">Смотрите также:</h2>
<div class="sect__content d-grid">$MYINF_5$</div>
</section>

</article>
<!-- </body> -->
</div>
</main> <!-- END COL-MAIN -->

<aside class="col-side">
$GLOBAL_CLEFTER$
</aside> <!-- END COL-SIDE -->
</div> <!-- END COLS -->
</div> <!-- END CONTENT -->


@code {
    private List<Components.BreadcrumbItem> breadcrumbItems = new List<Components.BreadcrumbItem>
    {
        new Components.BreadcrumbItem { DisplayName = "Главная страница", Url = "/", Position = 1 },
        new Components.BreadcrumbItem { DisplayName = "Каталог файлов", Url = "/load", Position = 2 },
        new Components.BreadcrumbItem { DisplayName = $"Категория", Url = "/load/#",  Position = 3 },
        new Components.BreadcrumbItem { DisplayName = $"Файл", Url = "/load/#/#",  Position = 4, IsCurrent = true }
    };

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string SeoUrl { get; set; }

    FileModel fileModel = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        fileModel = await fileService.GetLoadAsync(Convert.ToInt32(Id));

        UpdateBreadcrumb();

        fileModel.Views++;

        await fileService.UpdateLoadAsync(fileModel);
    }


    #region Breadcrumb

    private Dictionary<string, string> CategoriesList = Enum.GetValues(typeof(Categories))
          .Cast<Categories>()
          .ToDictionary(
              x => EnumHelper.GetDescription(x),
              x => EnumHelper.GetUrlSlug(x)
          );


    private string GetCategoryNameValueFromSlug(string slug)
    {
        var category = CategoriesList.FirstOrDefault(c => c.Key == slug);
        return category.Value ?? "Unknown Category";
    }

    private string GetCategoryNameKeyFromSlug(string slug)
    {
        var category = CategoriesList.FirstOrDefault(c => c.Key == slug);
        return category.Key ?? "Unknown Category";
    }


    private MarkupString GetHtmlDescription()
    {
        if (string.IsNullOrEmpty(fileModel.DescriptionFull))
        {
            return new MarkupString(""); // Return an empty string if DescriptionFull is empty
        }

        // Replace newline characters with <br> tags
        string htmlDescription = fileModel.DescriptionFull.Replace("\n", "<br>");

        return new MarkupString(htmlDescription);
    }

    private MarkupString GetTitle()
    {
         return new MarkupString($"{fileModel.Seo_Title}");
    }

     private MarkupString GetDescription()
    {
         return new MarkupString($"{fileModel.Seo_Description}");
    }

    private MarkupString GetKeywords()
    {
         return new MarkupString($"{fileModel.Seo_Keywords}");
    }

    private void UpdateBreadcrumb()
    {
        var categoryName = GetCategoryNameValueFromSlug(fileModel.Category);
         breadcrumbItems[2] = new Components.BreadcrumbItem
            {
                DisplayName = GetCategoryNameKeyFromSlug(fileModel.Category),
                Url = $"/load/{categoryName}",
                Position = 3
            };

        breadcrumbItems[3] = new Components.BreadcrumbItem
            {
                DisplayName = fileModel.Name,
                Url = $"/load/{categoryName}/{fileModel.Seo_Url}",
                IsCurrent = true,
                Position = 4
            };
            #endregion
    }
}
